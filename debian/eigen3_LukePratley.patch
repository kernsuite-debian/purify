Author: Luke Pratley <luke.pratley.15@ucl.ac.uk>
Description: Patched version for Eigen3/unsupported/FFT, still not upstream

This patch concatenates three commit, taken from

  https://bitbucket.org/LukePratley/eigen/branch/3.2

* 87372ff: New function to interface FFTW for 2D matrices (2016-07-08)
* 37484f6: Added the ability to pass level of rigor when passing FFTW
           planning flags (2016-07-08)
* 2e4f59f: Added the ability to create a 2D FFTW plan without performing
           an FFT (2016-07-11)

diff -uNr orig/unsupported/eigen/FFT 3.2/unsupported/eigen/FFT
--- orig/unsupported/Eigen/FFT	2016-07-13 12:14:36.000000000 +0200
+++ 3.2/unsupported/Eigen/FFT	2016-07-13 12:14:36.000000000 +0200
@@ -197,13 +197,13 @@
         m_impl.fwd(dst,src,static_cast<int>(nfft));
     }
 
-    /*
+    
     inline 
-    void fwd2(Complex * dst, const Complex * src, int n0,int n1)
+    void fwd2(Complex * dst, const Complex * src, int n0,int n1, bool only_plan = false)
     {
-      m_impl.fwd2(dst,src,n0,n1);
+      m_impl.fwd2(dst,src,n0,n1, only_plan);
     }
-    */
+    
 
     template <typename _Input>
     inline
@@ -251,7 +251,47 @@
         fwd( &dst[0],&src[0],nfft );
       }
     }
- 
+
+     template<typename InputDerived, typename ComplexDerived>
+    inline
+    void fwd2( Eigen::PlainObjectBase<ComplexDerived> & dst, const Eigen::PlainObjectBase<InputDerived> & src, const int & FFTW_plan_flag = FFTW_ESTIMATE|FFTW_PRESERVE_INPUT, bool only_plan = false)
+    {
+      typedef typename ComplexDerived::Scalar dst_type;
+      typedef typename InputDerived::Scalar src_type;
+      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ComplexDerived, InputDerived) // size at compile-time
+      EIGEN_STATIC_ASSERT((internal::is_same<dst_type, Complex>::value),
+            YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY)
+      EIGEN_STATIC_ASSERT(int(InputDerived::Flags)&int(ComplexDerived::Flags)&DirectAccessBit,
+            THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_WITH_DIRECT_MEMORY_ACCESS_SUCH_AS_MAP_OR_PLAIN_MATRICES)
+
+      if ( NumTraits< src_type >::IsComplex == 0 && HasFlag(HalfSpectrum) )
+        throw std::runtime_error("Not implemented yet");
+      else
+        dst.derived().resizeLike(src);
+
+      const int n0 = InputDerived::IsRowMajor ? src.rows(): src.cols();
+      const int n1 = InputDerived::IsRowMajor ? src.cols(): src.rows();
+      if ( src.innerStride() != 1 or src.outerStride() != n1 ) {
+        Matrix<src_type, Dynamic, Dynamic, Eigen::RowMajor> tmp = src;
+        fwd2( dst, tmp );
+        return;
+      }
+      //choosing new plan, and putting in dummy data for plan.
+      if (m_impl.plan_flag != FFTW_plan_flag)
+      {
+        set_plan_flag(FFTW_plan_flag); //choosing rigor flag for FFTW plans
+        if (FFTW_plan_flag != FFTW_ESTIMATE|FFTW_PRESERVE_INPUT)
+        {//dummy data for fftw planning, otherwise input/output data can be changed
+          Matrix<src_type, Dynamic, Dynamic, Eigen::RowMajor> tmp_src = src;
+          Matrix<dst_type, Dynamic, Dynamic, Eigen::RowMajor> tmp_dst = dst;
+          fwd2( tmp_dst.data(), tmp_src.data(), n0, n1, true );
+          if (only_plan)
+            return;
+        }
+      }
+      fwd2( dst.data(), src.data(), n0, n1 );
+    }
+
     template<typename InputDerived>
     inline
     fft_fwd_proxy< MatrixBase<InputDerived>, FFT<T_Scalar,T_Impl> >
@@ -344,6 +384,46 @@
       }
     }
 
+    template<typename InputDerived, typename ComplexDerived>
+    inline
+    void inv2( PlainObjectBase<ComplexDerived> & dst, const PlainObjectBase<InputDerived> & src, const int & FFTW_plan_flag = FFTW_ESTIMATE|FFTW_PRESERVE_INPUT, bool only_plan = false)
+    {
+      typedef typename ComplexDerived::Scalar dst_type;
+      typedef typename InputDerived::Scalar src_type;
+      EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ComplexDerived, InputDerived) // size at compile-time
+      EIGEN_STATIC_ASSERT((internal::is_same<dst_type, Complex>::value),
+            YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY)
+      EIGEN_STATIC_ASSERT(int(InputDerived::Flags)&int(ComplexDerived::Flags)&DirectAccessBit,
+            THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_WITH_DIRECT_MEMORY_ACCESS_SUCH_AS_MAP_OR_PLAIN_MATRICES)
+
+      if ( NumTraits< src_type >::IsComplex == 0 && HasFlag(HalfSpectrum) )
+        throw std::runtime_error("Not implemented yet");
+      else
+        dst.derived().resizeLike(src);
+
+      const int n0 = InputDerived::IsRowMajor ? src.rows(): src.cols();
+      const int n1 = InputDerived::IsRowMajor ? src.cols(): src.rows();
+      if ( src.innerStride() != 1 or src.outerStride() != n1 ) {
+        Matrix<src_type, Dynamic, Dynamic, Eigen::RowMajor> tmp = src;
+        inv2( dst, tmp );
+        return;
+      }
+      //choosing new plan, and putting in dummy data for plan.
+      if (m_impl.plan_flag != FFTW_plan_flag)
+      {
+        set_plan_flag(FFTW_plan_flag); //choosing rigor flag for FFTW plans
+        if (FFTW_plan_flag != FFTW_ESTIMATE|FFTW_PRESERVE_INPUT)
+        {//dummy data for fftw planning, otherwise input/output data can be changed
+          Matrix<src_type, Dynamic, Dynamic, Eigen::RowMajor> tmp_src = src;
+          Matrix<dst_type, Dynamic, Dynamic, Eigen::RowMajor> tmp_dst = dst;
+          inv2( tmp_dst.data(), tmp_src.data(), n0, n1, true );
+          if (only_plan)
+            return;
+        }
+      }
+      inv2( dst.data(), src.data(), n0, n1 );
+    }
+
     template <typename _Output>
     inline
     void inv( std::vector<_Output> & dst, const std::vector<Complex> & src,Index nfft=-1)
@@ -355,19 +435,31 @@
     }
 
 
-    /*
+    
     // TODO: multi-dimensional FFTs
     inline 
-    void inv2(Complex * dst, const Complex * src, int n0,int n1)
+    void inv2(Complex * dst, const Complex * src, int n0,int n1, bool only_plan = false)
     {
-      m_impl.inv2(dst,src,n0,n1);
+      m_impl.inv2(dst,src,n0,n1, only_plan);
       if ( HasFlag( Unscaled ) == false)
           scale(dst,1./(n0*n1),n0*n1);
     }
-  */
+  
 
     inline
     impl_type & impl() {return m_impl;}
+    inline
+    void set_plan_flag(const int new_plan_flag){
+      if (m_impl.plan_flag != new_plan_flag)
+      {
+        m_impl.clear();
+        m_impl.plan_flag = new_plan_flag;
+      }
+    };
+    inline
+    void clear_plans(){
+      m_impl.clear();
+    }
   private:
 
     template <typename T_Data>
diff -uNr orig/unsupported/eigen/src/FFT/ei_fftw_impl.h 3.2/unsupported/eigen/src/FFT/ei_fftw_impl.h
--- orig/unsupported/Eigen/src/FFT/ei_fftw_impl.h	2016-07-13 12:14:36.000000000 +0200
+++ 3.2/unsupported/Eigen/src/FFT/ei_fftw_impl.h	2016-07-13 12:14:36.000000000 +0200
@@ -52,41 +52,47 @@
   {
       typedef float scalar_type;
       typedef fftwf_complex complex_type;
+      int plan_flag = FFTW_ESTIMATE|FFTW_PRESERVE_INPUT;
       fftwf_plan m_plan;
       fftw_plan() :m_plan(NULL) {}
       ~fftw_plan() {if (m_plan) fftwf_destroy_plan(m_plan);}
 
       inline
-      void fwd(complex_type * dst,complex_type * src,int nfft) {
-          if (m_plan==NULL) m_plan = fftwf_plan_dft_1d(nfft,src,dst, FFTW_FORWARD, FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwf_execute_dft( m_plan, src,dst);
+      void fwd(complex_type * dst,complex_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwf_plan_dft_1d(nfft,src,dst, FFTW_FORWARD, plan_flag);
+          if (not only_plan)
+            fftwf_execute_dft( m_plan, src,dst);
       }
       inline
-      void inv(complex_type * dst,complex_type * src,int nfft) {
-          if (m_plan==NULL) m_plan = fftwf_plan_dft_1d(nfft,src,dst, FFTW_BACKWARD , FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwf_execute_dft( m_plan, src,dst);
+      void inv(complex_type * dst,complex_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwf_plan_dft_1d(nfft,src,dst, FFTW_BACKWARD , plan_flag);
+          if (not only_plan)
+            fftwf_execute_dft( m_plan, src,dst);
       }
       inline
-      void fwd(complex_type * dst,scalar_type * src,int nfft) {
-          if (m_plan==NULL) m_plan = fftwf_plan_dft_r2c_1d(nfft,src,dst,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwf_execute_dft_r2c( m_plan,src,dst);
+      void fwd(complex_type * dst,scalar_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwf_plan_dft_r2c_1d(nfft,src,dst, plan_flag);
+          if (not only_plan)
+            fftwf_execute_dft_r2c( m_plan,src,dst);
       }
       inline
-      void inv(scalar_type * dst,complex_type * src,int nfft) {
-          if (m_plan==NULL)
-              m_plan = fftwf_plan_dft_c2r_1d(nfft,src,dst,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwf_execute_dft_c2r( m_plan, src,dst);
+      void inv(scalar_type * dst,complex_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwf_plan_dft_c2r_1d(nfft,src,dst, plan_flag);
+          if (not only_plan)
+            fftwf_execute_dft_c2r( m_plan, src,dst);
       }
 
       inline 
-      void fwd2( complex_type * dst,complex_type * src,int n0,int n1) {
-          if (m_plan==NULL) m_plan = fftwf_plan_dft_2d(n0,n1,src,dst,FFTW_FORWARD,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwf_execute_dft( m_plan, src,dst);
+      void fwd2( complex_type * dst,complex_type * src,int n0,int n1, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwf_plan_dft_2d(n0,n1,src,dst,FFTW_FORWARD, plan_flag);
+          if (not only_plan)
+            fftwf_execute_dft( m_plan, src,dst);
       }
       inline 
-      void inv2( complex_type * dst,complex_type * src,int n0,int n1) {
-          if (m_plan==NULL) m_plan = fftwf_plan_dft_2d(n0,n1,src,dst,FFTW_BACKWARD,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwf_execute_dft( m_plan, src,dst);
+      void inv2( complex_type * dst,complex_type * src,int n0,int n1, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwf_plan_dft_2d(n0,n1,src,dst,FFTW_BACKWARD, plan_flag);
+          if (not only_plan)
+            fftwf_execute_dft( m_plan, src,dst);
       }
 
   };
@@ -95,40 +101,46 @@
   {
       typedef double scalar_type;
       typedef fftw_complex complex_type;
+      int plan_flag = FFTW_ESTIMATE|FFTW_PRESERVE_INPUT;
       ::fftw_plan m_plan;
       fftw_plan() :m_plan(NULL) {}
       ~fftw_plan() {if (m_plan) fftw_destroy_plan(m_plan);}
 
       inline
-      void fwd(complex_type * dst,complex_type * src,int nfft) {
-          if (m_plan==NULL) m_plan = fftw_plan_dft_1d(nfft,src,dst, FFTW_FORWARD, FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftw_execute_dft( m_plan, src,dst);
+      void fwd(complex_type * dst,complex_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftw_plan_dft_1d(nfft,src,dst, FFTW_FORWARD, plan_flag);
+          if (not only_plan)
+            fftw_execute_dft( m_plan, src,dst);
       }
       inline
-      void inv(complex_type * dst,complex_type * src,int nfft) {
-          if (m_plan==NULL) m_plan = fftw_plan_dft_1d(nfft,src,dst, FFTW_BACKWARD , FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftw_execute_dft( m_plan, src,dst);
+      void inv(complex_type * dst,complex_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftw_plan_dft_1d(nfft,src,dst, FFTW_BACKWARD , plan_flag);
+          if (not only_plan)
+            fftw_execute_dft( m_plan, src,dst);
       }
       inline
-      void fwd(complex_type * dst,scalar_type * src,int nfft) {
-          if (m_plan==NULL) m_plan = fftw_plan_dft_r2c_1d(nfft,src,dst,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftw_execute_dft_r2c( m_plan,src,dst);
+      void fwd(complex_type * dst,scalar_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftw_plan_dft_r2c_1d(nfft,src,dst,plan_flag);
+          if (not only_plan)
+            fftw_execute_dft_r2c( m_plan,src,dst);
       }
       inline
-      void inv(scalar_type * dst,complex_type * src,int nfft) {
-          if (m_plan==NULL)
-              m_plan = fftw_plan_dft_c2r_1d(nfft,src,dst,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftw_execute_dft_c2r( m_plan, src,dst);
+      void inv(scalar_type * dst,complex_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftw_plan_dft_c2r_1d(nfft,src,dst,plan_flag);
+          if (not only_plan)    
+            fftw_execute_dft_c2r( m_plan, src,dst);
       }
       inline 
-      void fwd2( complex_type * dst,complex_type * src,int n0,int n1) {
-          if (m_plan==NULL) m_plan = fftw_plan_dft_2d(n0,n1,src,dst,FFTW_FORWARD,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftw_execute_dft( m_plan, src,dst);
+      void fwd2( complex_type * dst,complex_type * src,int n0,int n1, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftw_plan_dft_2d(n0,n1,src,dst,FFTW_FORWARD,plan_flag);
+          if (not only_plan)
+            fftw_execute_dft( m_plan, src,dst);
       }
       inline 
-      void inv2( complex_type * dst,complex_type * src,int n0,int n1) {
-          if (m_plan==NULL) m_plan = fftw_plan_dft_2d(n0,n1,src,dst,FFTW_BACKWARD,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftw_execute_dft( m_plan, src,dst);
+      void inv2( complex_type * dst,complex_type * src,int n0,int n1, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftw_plan_dft_2d(n0,n1,src,dst,FFTW_BACKWARD,plan_flag);
+          if (not only_plan)
+            fftw_execute_dft( m_plan, src,dst);
       }
   };
   template <> 
@@ -137,39 +149,45 @@
       typedef long double scalar_type;
       typedef fftwl_complex complex_type;
       fftwl_plan m_plan;
+      int plan_flag = FFTW_ESTIMATE|FFTW_PRESERVE_INPUT;
       fftw_plan() :m_plan(NULL) {}
       ~fftw_plan() {if (m_plan) fftwl_destroy_plan(m_plan);}
 
       inline
-      void fwd(complex_type * dst,complex_type * src,int nfft) {
-          if (m_plan==NULL) m_plan = fftwl_plan_dft_1d(nfft,src,dst, FFTW_FORWARD, FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwl_execute_dft( m_plan, src,dst);
+      void fwd(complex_type * dst,complex_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwl_plan_dft_1d(nfft,src,dst, FFTW_FORWARD, plan_flag);
+          if (not only_plan)
+            fftwl_execute_dft( m_plan, src,dst);
       }
       inline
-      void inv(complex_type * dst,complex_type * src,int nfft) {
-          if (m_plan==NULL) m_plan = fftwl_plan_dft_1d(nfft,src,dst, FFTW_BACKWARD , FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwl_execute_dft( m_plan, src,dst);
+      void inv(complex_type * dst,complex_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwl_plan_dft_1d(nfft,src,dst, FFTW_BACKWARD , plan_flag);
+          if (not only_plan)
+            fftwl_execute_dft( m_plan, src,dst);
       }
       inline
-      void fwd(complex_type * dst,scalar_type * src,int nfft) {
-          if (m_plan==NULL) m_plan = fftwl_plan_dft_r2c_1d(nfft,src,dst,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwl_execute_dft_r2c( m_plan,src,dst);
+      void fwd(complex_type * dst,scalar_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwl_plan_dft_r2c_1d(nfft,src,dst,plan_flag);
+          if (not only_plan)
+            fftwl_execute_dft_r2c( m_plan,src,dst);
       }
       inline
-      void inv(scalar_type * dst,complex_type * src,int nfft) {
-          if (m_plan==NULL)
-              m_plan = fftwl_plan_dft_c2r_1d(nfft,src,dst,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwl_execute_dft_c2r( m_plan, src,dst);
+      void inv(scalar_type * dst,complex_type * src,int nfft, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwl_plan_dft_c2r_1d(nfft,src,dst,plan_flag);
+          if (not only_plan)
+            fftwl_execute_dft_c2r( m_plan, src,dst);
       }
       inline 
-      void fwd2( complex_type * dst,complex_type * src,int n0,int n1) {
-          if (m_plan==NULL) m_plan = fftwl_plan_dft_2d(n0,n1,src,dst,FFTW_FORWARD,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwl_execute_dft( m_plan, src,dst);
+      void fwd2( complex_type * dst,complex_type * src,int n0,int n1, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwl_plan_dft_2d(n0,n1,src,dst,FFTW_FORWARD,plan_flag);
+          if (not only_plan)
+            fftwl_execute_dft( m_plan, src,dst);
       }
       inline 
-      void inv2( complex_type * dst,complex_type * src,int n0,int n1) {
-          if (m_plan==NULL) m_plan = fftwl_plan_dft_2d(n0,n1,src,dst,FFTW_BACKWARD,FFTW_ESTIMATE|FFTW_PRESERVE_INPUT);
-          fftwl_execute_dft( m_plan, src,dst);
+      void inv2( complex_type * dst,complex_type * src,int n0,int n1, bool only_plan) {
+          if (m_plan==NULL) m_plan = fftwl_plan_dft_2d(n0,n1,src,dst,FFTW_BACKWARD,plan_flag);
+          if (not only_plan)
+            fftwl_execute_dft( m_plan, src,dst);
       }
   };
 
@@ -178,7 +196,7 @@
   {
       typedef _Scalar Scalar;
       typedef std::complex<Scalar> Complex;
-
+      int plan_flag = FFTW_ESTIMATE|FFTW_PRESERVE_INPUT;
       inline
       void clear() 
       {
@@ -187,44 +205,44 @@
 
       // complex-to-complex forward FFT
       inline
-      void fwd( Complex * dst,const Complex *src,int nfft)
+      void fwd( Complex * dst,const Complex *src,int nfft, bool only_plan = false)
       {
-        get_plan(nfft,false,dst,src).fwd(fftw_cast(dst), fftw_cast(src),nfft );
+        get_plan(nfft,false,dst,src).fwd(fftw_cast(dst), fftw_cast(src),nfft, only_plan);
       }
 
       // real-to-complex forward FFT
       inline
-      void fwd( Complex * dst,const Scalar * src,int nfft) 
+      void fwd( Complex * dst,const Scalar * src,int nfft, bool only_plan = false) 
       {
-          get_plan(nfft,false,dst,src).fwd(fftw_cast(dst), fftw_cast(src) ,nfft);
+          get_plan(nfft,false,dst,src).fwd(fftw_cast(dst), fftw_cast(src) ,nfft, only_plan);
       }
 
       // 2-d complex-to-complex
       inline
-      void fwd2(Complex * dst, const Complex * src, int n0,int n1)
+      void fwd2(Complex * dst, const Complex * src, int n0,int n1, bool only_plan = false)
       {
-          get_plan(n0,n1,false,dst,src).fwd2(fftw_cast(dst), fftw_cast(src) ,n0,n1);
+          get_plan(n0,n1,false,dst,src).fwd2(fftw_cast(dst), fftw_cast(src) ,n0,n1, only_plan);
       }
 
       // inverse complex-to-complex
       inline
-      void inv(Complex * dst,const Complex  *src,int nfft)
+      void inv(Complex * dst,const Complex  *src,int nfft, bool only_plan = false)
       {
-        get_plan(nfft,true,dst,src).inv(fftw_cast(dst), fftw_cast(src),nfft );
+        get_plan(nfft,true,dst,src).inv(fftw_cast(dst), fftw_cast(src),nfft, only_plan);
       }
 
       // half-complex to scalar
       inline
-      void inv( Scalar * dst,const Complex * src,int nfft) 
+      void inv( Scalar * dst,const Complex * src,int nfft, bool only_plan = false) 
       {
-        get_plan(nfft,true,dst,src).inv(fftw_cast(dst), fftw_cast(src),nfft );
+        get_plan(nfft,true,dst,src).inv(fftw_cast(dst), fftw_cast(src),nfft, only_plan);
       }
 
       // 2-d complex-to-complex
       inline
-      void inv2(Complex * dst, const Complex * src, int n0,int n1)
+      void inv2(Complex * dst, const Complex * src, int n0,int n1, bool only_plan = false)
       {
-        get_plan(n0,n1,true,dst,src).inv2(fftw_cast(dst), fftw_cast(src) ,n0,n1);
+        get_plan(n0,n1,true,dst,src).inv2(fftw_cast(dst), fftw_cast(src) ,n0,n1, only_plan);
       }
 
 
@@ -234,13 +252,13 @@
       typedef std::map<int64_t,PlanData> PlanMap;
 
       PlanMap m_plans;
-
       inline
       PlanData & get_plan(int nfft,bool inverse,void * dst,const void * src)
       {
           bool inplace = (dst==src);
           bool aligned = ( (reinterpret_cast<size_t>(src)&15) | (reinterpret_cast<size_t>(dst)&15) ) == 0;
           int64_t key = ( (nfft<<3 ) | (inverse<<2) | (inplace<<1) | aligned ) << 1;
+          m_plans[key].plan_flag = plan_flag;
           return m_plans[key];
       }
 
@@ -250,6 +268,7 @@
           bool inplace = (dst==src);
           bool aligned = ( (reinterpret_cast<size_t>(src)&15) | (reinterpret_cast<size_t>(dst)&15) ) == 0;
           int64_t key = ( ( (((int64_t)n0) << 30)|(n1<<3 ) | (inverse<<2) | (inplace<<1) | aligned ) << 1 ) + 1;
+          m_plans[key].plan_flag = plan_flag;
           return m_plans[key];
       }
   };
